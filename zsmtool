#!/usr/bin/env python3

import sys
import argparse
import ruamel.yaml
import warnings
import io
import math
import mido
from ruamel.yaml.scalarint import HexInt, BinaryInt, ScalarInt
from ruamel.yaml.comments import CommentedMap, CommentedSeq
from struct import unpack, pack

mididrum = [
    *(['(MIDI drum out of range)'] * 25),
    'Snare Roll',
    'Finger Snap',
    'High Q',
    'Slap',
    'Scratch Pull',
    'Scratch Push',
    'Sticks',
    'Square Click',
    'Metronome Bell',
    'Metronome Click',
    'Acoustic Bass Drum',
    'Electric Bass Drum',
    'Side Stick',
    'Acoustic Snare',
    'Hand Clap',
    'Electric Snare',
    'Low Floor Tom',
    'Closed Hi-Hat',
    'High Floor Tom',
    'Pedal Hi-Hat',
    'Low Tom',
    'Open Hi-Hat',
    'Low-Mid Tom',
    'High-Mid Tom',
    'Crash Cymbal 1',
    'High Tom',
    'Ride Cymbal 1',
    'Chinese Cymbal',
    'Ride Bell',
    'Tambourine',
    'Splash Cymbal',
    'Cowbell',
    'Crash Cymbal 2',
    'Vibraslap',
    'Ride Cymbal 2',
    'High Bongo',
    'Low Bongo',
    'Mute High Conga',
    'Open High Conga',
    'Low Conga',
    'High Timbale',
    'Low Timbale',
    'High Agogo',
    'Low Agogo',
    'Cabasa',
    'Maracas',
    'Short Whistle',
    'Long Whistle',
    'Short Guiro',
    'Long Guiro',
    'Claves',
    'High Woodblock',
    'Low Woodblock',
    'Mute Cuica',
    'Open Cuica',
    'Mute Triangle',
    'Open Triangle',
    'Shaker',
    'Jingle Bell',
    'Belltree',
    'Castanets',
    'Mute Surdo',
    'Open Surdo',
    *(['(MIDI drum out of range)'] * 40),
]

midiccs = {
    0: 'Bank Select MSB',
    1: 'Mod Wheel MSB',
    2: 'Breath Control MSB',
    4: 'Foot Pedal MSB',
    5: 'Portamento Time MSB',
    6: 'Data Entry MSB',
    7: 'Volume MSB',
    8: 'Balance MSB',
    10: 'Pan MSB',
    11: 'Expression MSB',
    12: 'Effect 1 MSB',
    13: 'Effect 2 MSB',

    32: 'Bank Select LSB',
    33: 'Mod Wheel LSB',
    34: 'Breath Control LSB',
    36: 'Foot Pedal LSB',
    37: 'Portamento Time LSB',
    38: 'Data Entry LSB',
    39: 'Volume LSB',
    40: 'Balance LSB',
    42: 'Pan LSB',
    43: 'Expression LSB',
    44: 'Effect 1 LSB',
    45: 'Effect 2 LSB',

    64: 'Damper Pedal',
    65: 'Portamento on/off',
    66: 'Sostenuto Pedal',
    67: 'Soft Pedal',
    68: 'Legato',
    69: 'Hold 2',
    70: 'Variation',
    71: 'Resonance',
    72: 'Release Time',
    73: 'Attack Time',
    74: 'Cutoff',
    84: 'Portamento Time',

    91: 'Reverb Depth',
    92: 'Tremolo Depth',
    93: 'Chorus Depth',
    94: 'Detune Depth',
    95: 'Phaser Depth',

    96: 'Data Increment',
    97: 'Data Decrement',

    98: 'NRPN LSB',
    99: 'NRPN MSB',
    100: 'RPN LSB',
    101: 'RPN MSB',

    120: 'All Sound Off',
    121: 'Reset All Controllers',
    122: 'Local on/off',
    123: 'All Notes Off',
    124: 'Omni Off',
    125: 'Omni On',

    126: 'Mono On',
    127: 'Poly On',

}

midipatches = [
    'Acoustic Grand Piano',
    'Bright Acoustic Piano',
    'Electric Grand Piano',
    'Honky-tonk Piano',
    'Electric Piano 1',
    'Electric Piano 2',
    'Harpsichord',
    'Clavinet',
    'Celesta',
    'Glockenspiel',
    'Music Box',
    'Vibraphone',
    'Marimba',
    'Xylophone',
    'Tubular Bells',
    'Dulcimer',
    'Drawbar Organ',
    'Percussive Organ',
    'Rock Organ',
    'Church Organ',
    'Reed Organ',
    'Accordion',
    'Harmonica',
    'Bandoneon',
    'Acoustic Guitar (Nylon)',
    'Acoustic Guitar (Steel)',
    'Electric Guitar (Jazz)',
    'Electric Guitar (Clean)',
    'Electric Guitar (Muted)',
    'Electric Guitar (Overdriven)',
    'Electric Guitar (Distortion)',
    'Electric Guitar (Harmonics)',
    'Acoustic Bass',
    'Electric Bass (finger)',
    'Electric Bass (picked)',
    'Fretless Bass',
    'Slap Bass 1',
    'Slap Bass 2',
    'Synth Bass 1',
    'Synth Bass 2',
    'Violin',
    'Viola',
    'Cello',
    'Contrabass',
    'Tremolo Strings',
    'Pizzicato Strings',
    'Orchestral Harp',
    'Timpani',
    'String Ensemble 1',
    'String Ensemble 2',
    'Synth Strings 1',
    'Synth Strings 2',
    'Choir Aahs',
    'Voice Doos',
    'Synth Voice',
    'Orchestra Hit',
    'Trumpet',
    'Trombone',
    'Tuba',
    'Muted Trumpet',
    'French Horn',
    'Brass Section',
    'Synth Brass 1',
    'Synth Brass 2',
    'Soprano Sax',
    'Alto Sax',
    'Tenor Sax',
    'Baritone Sax',
    'Oboe',
    'English Horn',
    'Bassoon',
    'Clarinet',
    'Piccolo',
    'Flute',
    'Recorder',
    'Pan Flute',
    'Blown Bottle',
    'Shakuhachi',
    'Whistle',
    'Ocarina',
    'Lead 1 (Square)',
    'Lead 2 (Sawtooth)',
    'Lead 3 (Triangle)',
    'Lead 4 (Chiff+Sine)',
    'Lead 5 (Charang)',
    'Lead 6 (Voice)',
    'Lead 7 (Fifths)',
    'Lead 8 (Solo)',
    'Pad 1 (Fantasia)',
    'Pad 2 (Warm)',
    'Pad 3 (Polysynth)',
    'Pad 4 (Choir)',
    'Pad 5 (Bowed)',
    'Pad 6 (Metallic)',
    'Pad 7 (Halo)',
    'Pad 8 (Sweep)',
    'FX 1 (Raindrop)',
    'FX 2 (Soundtrack)',
    'FX 3 (Crystal)',
    'FX 4 (Atmosphere)',
    'FX 5 (Brightness)',
    'FX 6 (Goblin)',
    'FX 7 (Echo)',
    'FX 8 (Sci-Fi)',
    'Sitar',
    'Banjo',
    'Shamisen',
    'Koto',
    'Kalimba',
    'Bagpipe',
    'Fiddle',
    'Shanai',
    'Tinkle Bell',
    'Agogo',
    'Steel Drum',
    'Woodblock',
    'Taiko Drum',
    'Melodic Tom',
    'Synth Drum',
    'Reverse Cymbal',
    'Fret Noise',
    'Breath Noise',
    'Seashore',
    'Bird Tweet',
    'Telephone Ring',
    'Helicopter',
    'Applause',
    'Gunshot',
]

def MIDItoYAML(ifh,z):
    om = mido.MidiFile(file=ifh)
    z['version'] = 1
    z['loop_addr'] = 0
    z['pcm_offset'] = 0
    z['fm_channel_mask'] = 0
    z['psg_channel_mask'] = 0
    z['reserved_header'] = 0

    nm = mido.MidiFile()
    nm.tracks.append(mido.merge_tracks(om.tracks))
    nm.type = 0
    nm.ticks_per_beat = om.ticks_per_beat

    # get list of tempos

    candidate_ticks = []
    for msg in nm.tracks[0]:
        if msg.type == 'set_tempo':
            candidate_ticks.append(round(1000000/(msg.tempo / 24), 3))

    # for now let's just use the first one
    ctick = candidate_ticks[0]

    while ctick < 60:
        ctick *= 2

    while ctick > 255:
        ctick /= 2

    z['tick_rate'] = int(ctick)

    tempo = 500000
    newtempo = tempo
    ms_per_tick = 1000000/z['tick_rate']
    speed = (nm.ticks_per_beat*ms_per_tick)/tempo
    delay = 0
    oldcmd = 0
    note_data = []
    flush = False

    z['data'] = []
    d = z['data']

    #print(speed)

    # now process the data
    for msg in nm.tracks[0]:
        delay += msg.time
        ticks_now = 0
        if delay > 0:
            ticks_now = math.floor(delay / speed)
        if flush or ticks_now > 0:
            while len(note_data) > 0:
                writes = len(note_data)
                if writes > 62:
                    writes = 62
                d.append({'chip_write': {'chip_id':1, 'data':note_data[0:writes]}})
                note_data = note_data[writes:]
            flush = False
            oldcmd = 0
        while ticks_now > 0:
            this_delay = ticks_now
            if this_delay > 63:
                this_delay = 63
            d.append({'delay': this_delay & 0x7F})
            delay -= this_delay * speed
            ticks_now -= this_delay
        if newtempo != tempo:
            tempo = newtempo
            speed = (nm.ticks_per_beat*ms_per_tick)/tempo
        if msg.type == 'note_off':
            cmd = 0x80 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.note)
            note_data.append(msg.velocity)
        elif msg.type == 'note_on':
            cmd = 0x90 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.note)
            note_data.append(msg.velocity)
        elif msg.type == 'polytouch':
            cmd = 0xa0 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.note)
            note_data.append(msg.value)
        elif msg.type == 'control_change':
            cmd = 0xb0 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.control)
            note_data.append(msg.value)
        elif msg.type == 'program_change':
            cmd = 0xc0 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.program)
        elif msg.type == 'aftertouch':
            cmd = 0xd0 | msg.channel
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(msg.value)
        elif msg.type == 'pitchwheel':
            cmd = 0xe0 | msg.channel
            pitch = msg.pitch + 0x2000
            pitch_l = pitch & 0x7f
            pitch_h = (pitch >> 7) & 0x7f
            if oldcmd != cmd:
                note_data.append(cmd)
            oldcmd = cmd
            note_data.append(pitch_l)
            note_data.append(pitch_h)
        elif msg.type == 'set_tempo':
            newtempo = msg.tempo
            flush = True
        elif isinstance(msg, mido.MetaMessage):
            pass # ignore all other metamessages
        else:
            raise

    while len(note_data) > 0:
        writes = len(note_data)
        if writes > 61:
            writes = 61
        d.append({'chip_write': {'chip_id':1, 'data':note_data[0:writes]}})
        note_data = note_data[writes:]

    d.append("eod")
    return True


def ZSMtoYAML(ifh,z):
    state = 0
    psg_write_group = None

    while (byte := ifh.read(1)):
        if state == 0: # ZSM file header
            if byte != b'z':                    # Byte 00, Magic Header
                return False
            if ifh.read(1) != b'm':             # Byte 01, Magic Header
                return False
                                                # Byte 02, version number
            z['version'] = unpack("B",ifh.read(1))[0]

            if z['version'] != 1:
                return False
                                                # Bytes 03-05, loop point
            z['loop_addr'] = unpack("<L",ifh.read(3) + b'\x00')[0]
                                                # Bytes 06-08, PCM offset
            z['pcm_offset'] = unpack("<L",ifh.read(3) + b'\x00')[0]
                                                # Byte 09, FM chanel mask
            z['fm_channel_mask'] = unpack("B",ifh.read(1))[0]
                                                # Bytes 0A-0B, PSG chan mask
            z['psg_channel_mask'] = unpack("<H",ifh.read(2))[0]
                                                # Bytes 0C-0D, tick rate
            z['tick_rate'] = unpack("<H",ifh.read(2))[0]
                                                # Bytes 0E-0F, reserved 0x00
            z['reserved_header'] = unpack("<H",ifh.read(2))[0]

            z['data'] = []

            state=state+1
        elif state == 1: # ZSM Data
            d = z['data']
            b = unpack("B",byte)[0]
            # Check to see if this is the loop point
            if ifh.tell()-1 == z['loop_addr']:
                d.append("loop")
            if b >= 0x40: # Flush PSG write group if one exists
                if psg_write_group is not None:
                    d.append({'psg_write': psg_write_group})
                    psg_write_group = None
            if b < 0x40: # PSG write
                if psg_write_group is None:
                    psg_write_group = []
                psg_write_group.append({'addr': b, 'data': unpack("B",ifh.read(1))[0]})
            elif b == 0x40: # EXT
                chn = unpack("B",ifh.read(1))[0]
                channel = (chn >> 6) & 0x03
                if channel == 0: # PCM data
                    pcm_write = []
                    for i in range((chn & 0x3f) >> 1):
                        pcm_write.append({'addr': unpack("B",ifh.read(1))[0], 'data': unpack("B",ifh.read(1))[0]})
                    d.append({'pcm_write': pcm_write})
                elif channel == 1: # Chip data
                    total_bytes = chn & 0x3f
                    chip_type = unpack("B",ifh.read(1))[0]
                    total_bytes -= 1
                    chip_write = []
                    for i in range(total_bytes):
                        chip_write.append(unpack("B",ifh.read(1))[0])
                    d.append({'chip_write': {'chip_id': chip_type, 'data': chip_write}})
                elif channel == 2: # Sync data
                    sync_event = []
                    for i in range((chn & 0x3f) >> 1):
                        sync_event.append({'type': unpack("B",ifh.read(1))[0], 'data': unpack("B",ifh.read(1))[0]})
                    d.append({'sync_event': sync_event})
                else: # other EXT command
                    ext = {'channel': channel, 'data': []}
                    for i in range(chn & 0x3f):
                        ext['data'].append(unpack("B",ifh.read(1))[0])
                    d.append({'ext_data': ext})
            elif b < 0x80: # a series of YM writes b & 0x3f bytes long follows
                ymw = []
                for i in range(b & 0x3f):
                    r = unpack("B",ifh.read(1))[0]
                    v = unpack("B",ifh.read(1))[0]
                    ymw.append({'addr': r, 'data': v})
                    #print(r)
                d.append({"ym_write": ymw})
            elif b == 0x80: # End of data
                d.append("eod")
                del z['loop_addr']
                if z['pcm_offset'] > 0:
                    if ifh.tell() == z['pcm_offset']:
                        state = state+1
                    else: # PCM data doesn't line up, error
                        return False
                else:
                    del z['pcm_offset']
                    return True
            else: # Delay
                d.append({'delay': b & 0x7F})
        elif state == 2: # PCM data
            if byte != b'P':
                return False
            if ifh.read(2) != b'CM':
                return False
            last_inst = unpack("B",ifh.read(1))[0]
            insts = []
            for i in range(last_inst+1):
                if i != unpack("B",ifh.read(1))[0]:
                    return False
                igeom = unpack("B",ifh.read(1))[0]
                ioffset = unpack("<L",ifh.read(3) + b'\x00')[0]
                ilength = unpack("<L",ifh.read(3) + b'\x00')[0]
                ifeat = unpack("B",ifh.read(1))[0]
                iloop = unpack("<L",ifh.read(3) + b'\x00')[0]
                ires = unpack("<L",ifh.read(4))[0]
                insts.append({'geometry': igeom, 'offset': ioffset, 'length': ilength, 'features': ifeat, 'loop_point': iloop, 'reserved': ires})
            d.append({'pcm_insts': insts})
            d.append({'pcm_data': [{'value': num} for num in list(ifh.read())]})
        else:
            return False

    if state == 2:
        # If we hit EOF, assume it was a full read
        return True
    else:
        # We hit EOF unexpectedly
        return False

def YAMLtoZSM(ofh,z):
    # Write out the header
    ofh.write(b'zm')
    # Write out the version
    ofh.write(pack("B",z['version']))
    # Write out the 24-bit loop point
    ofh.write(pack("<H",z['loop_addr'] & 0xffff))
    ofh.write(pack("B",(z['loop_addr'] & 0xff0000) >> 16))
    # Write out the 24-bit PCM offset
    ofh.write(pack("<H",z['pcm_offset'] & 0xffff))
    ofh.write(pack("B",(z['pcm_offset'] & 0xff0000) >> 16))
    # Write out the FM channel mask
    ofh.write(pack("B",z['fm_channel_mask']))
    # Write out the PSG channel mask
    ofh.write(pack("<H",z['psg_channel_mask']))
    # Write out the tick rate
    ofh.write(pack("<H",z['tick_rate']))
    # Write out the reserved header
    ofh.write(pack("<H",z['reserved_header']))
    # Write out ZSM data block
    d = z['data']
    di = 0
    while di < len(d):
        if type(d[di]) is CommentedMap:
            for k2, v2 in d[di].items():
                if k2 == 'ym_write':
                    if len(v2) > 0x3f:
                        warnings.warn("Excessive run length of YM write block")
                        return False
                    # Write out the YM write group length
                    ofh.write(pack("B",len(v2)+0x40))
                    i2 = 0
                    while i2 < len(v2):
                        # Write out the YM events themselves
                        ofh.write(pack("B",v2[i2]['addr']))
                        ofh.write(pack("B",v2[i2]['data']))
                        i2 += 1
                elif k2 == 'psg_write':
                    i2 = 0
                    while i2 < len(v2):
                        # Write out the PSG events themselves
                        if v2[i2]['addr'] > 0x3f:
                            warnings.warn("PSG register address out of bounds")
                            return False
                        ofh.write(pack("B",v2[i2]['addr']))
                        ofh.write(pack("B",v2[i2]['data']))
                        i2 += 1
                elif k2 == 'pcm_write':
                    if len(v2) > 0x1f:
                        warnings.warn("Excessive run length of PCM write block")
                        return False
                    # Write out the EXT command and channel+length
                    ofh.write(b'\x40')
                    ofh.write(pack("B",len(v2) * 2))
                    i2 = 0
                    while i2 < len(v2):
                        # Write out the PCM events themselves
                        ofh.write(pack("B",v2[i2]['addr']))
                        ofh.write(pack("B",v2[i2]['data']))
                        i2 += 1
                elif k2 == 'chip_write':
                    if len(v2['data']) > 62:
                        warnings.warn("Excessive run length of chip write block")
                        return False
                    # Write out the EXT command and channel+length
                    ofh.write(b'\x40')
                    ofh.write(pack("B",(len(v2['data'])+1)|0x40))
                    ofh.write(pack("B",v2['chip_id']))
                    i2 = 0
                    while i2 < len(v2['data']):
                        # Write out the chip write events themselves
                        ofh.write(pack("B",v2['data'][i2]))
                        i2 += 1
                elif k2 == 'sync_event':
                    if len(v2) > 0x1f:
                        warnings.warn("Excessive run length of sync write block")
                        return False
                    # Write out the EXT command and channel+length
                    ofh.write(b'\x40')
                    ofh.write(pack("B",(len(v2) * 2)|0x80))
                    i2 = 0
                    while i2 < len(v2):
                        # Write out the sync events themselves
                        ofh.write(pack("B",v2[i2]['type']))
                        ofh.write(pack("B",v2[i2]['data']))
                        i2 += 1
                elif k2 == 'delay':
                    if v2 > 0x7f:
                        warnings.warn("Delay out of bounds")
                        return False
                    ofh.write(pack("B",v2 + 0x80))
                elif k2 == 'pcm_insts':
                    # Write out the magic for the PCM instrument table
                    ofh.write(b"PCM")
                    ofh.write(pack("B",len(v2)-1))
                    i2 = 0
                    while i2 < len(v2):
                        # Write out the instruments themselves (number, geom, offset, length, etc)
                        ofh.write(pack("B",i2))
                        ofh.write(pack("B",v2[i2]['geometry'] & 0x30))
                        ofh.write(pack("<H",v2[i2]['offset'] & 0xffff))
                        ofh.write(pack("B",(v2[i2]['offset'] & 0xff0000) >> 16))
                        ofh.write(pack("<H",v2[i2]['length'] & 0xffff))
                        ofh.write(pack("B",(v2[i2]['length'] & 0xff0000) >> 16))
                        ofh.write(pack("B",v2[i2]['features']))
                        ofh.write(pack("<H",v2[i2]['loop_point'] & 0xffff))
                        ofh.write(pack("B",(v2[i2]['loop_point'] & 0xff0000) >> 16))
                        ofh.write(pack("<L",v2[i2]['reserved']))
                        i2 += 1
                elif k2 == 'pcm_data':
                    i2 = 0
                    while i2 < len(v2):
                        ofh.write(pack("B",v2[i2]['value'] & 0xff))
                        i2 += 1
                else:
                    warnings.warn("Unrecognized token: {0}".format(k2))
                    return False
        elif type(d[di]) is str:
            if d[di] == 'loop':
                pass
            elif d[di] == 'eod':
                ofh.write(b'\x80')
        di += 1    
    return True

def annotateYAML(z): # perhaps this should be called annotate_map, since it's not yaml, but an internal python structure yet to become YAML
    ticks = 0
    file_offset = 16
    z['loop_addr'] = 0
    z['pcm_offset'] = 0
    for k in z:
        if k == 'version':
            z.ca.items.pop(k, None) # this clears any existing EOL comment
            z[k] = HexInt(z[k],width=2)
            if z[k] == 1:
                z.yaml_add_eol_comment("Version 1 is the only valid value at this time",key=k)
            else:
                z.yaml_add_eol_comment("!!! Invalid version",key=k)
        elif k == 'fm_channel_mask':
            z.ca.items.pop(k, None)
            z[k] = BinaryInt(z[k],width=8,underscore=[4,1,0])
            z.yaml_add_eol_comment("FM channels that are touched by this ZSM need to have a 1 here. Channel number 0 is the rightmost bit.",key=k)
        elif k == 'psg_channel_mask':
            z.ca.items.pop(k, None)
            z[k] = BinaryInt(z[k],width=16,underscore=[4,1,0])
            z.yaml_add_eol_comment("PSG channels that are touched by this ZSM need to have a 1 here. Channel number 0 is the rightmost bit.",key=k)
        elif k == 'tick_rate':
            z.ca.items.pop(k, None)
            z[k] = ScalarInt(z[k])
            z.yaml_add_eol_comment("Number of ticks per second",key=k)
        elif k == 'reserved_header':
            z.ca.items.pop(k, None)
            z[k] = HexInt(z[k],width=4)
            z.yaml_add_eol_comment("For future use",key=k)
        elif k == 'data':
            z.ca.items.pop(k, None) # clear any EOL comment, but we're not going to add another one here
            psg_freq = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            pcm_ch = 1
            pcm_depth = 0
            pcm_rate = 0
            d = z[k]
            di=0
            while di < len(d): # iterate over the data block
                if type(d[di]) is CommentedMap:
                    for k2, v2 in d[di].items():
                        if k2 == 'ym_write':
                            file_offset += 1
                            # Replace any existing comment
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("YM write block: {0:d} (0x{1:02x}) events".format(len(v2),len(v2)),key=k2)
                            i2 = 0
                            while i2 < len(v2):
                                file_offset += 2
                                # Remove any existing comments
                                v2[i2].ca.items.pop('addr',None)
                                v2[i2].ca.items.pop('data',None)
                                # Normalize addr
                                v2[i2]['addr'] = HexInt(v2[i2]['addr'],width=2)
                                # Normalize data to hex unless overridden later
                                v2[i2]['data'] = HexInt(v2[i2]['data'],width=2)
                                if v2[i2]['addr'] == 0x01:
                                    v2[i2].yaml_add_eol_comment("Test Register",key='addr')
                                    if v2[i2]['data'] & 0x2:
                                        v2[i2].yaml_add_eol_comment("LFO disable and hold",key='data')
                                    else:
                                        v2[i2].yaml_add_eol_comment("LFO enable",key='data')
                                elif v2[i2]['addr'] == 0x08:
                                    v2[i2].yaml_add_eol_comment("Key Control",key='addr')
                                    if v2[i2]['data'] & 0b01111000 == 0:
                                        v2[i2].yaml_add_eol_comment("Key off, channel {0:d}".format(v2[i2]['data'] & 0x7),key='data')
                                    elif v2[i2]['data'] & 0b01111000 == 0b01111000:
                                        v2[i2].yaml_add_eol_comment("Key on, channel {0:d}".format(v2[i2]['data'] & 0x7),key='data')
                                    else:
                                        v2[i2].yaml_add_eol_comment("Key mixed off/on, channel {0:d}".format(v2[i2]['data'] & 0x7),key='data')
                                        v2[i2]['data'] = BinaryInt(v2[i2]['data'],width=8,underscore=[8,1,0])
                                elif v2[i2]['addr'] == 0x0f:
                                    v2[i2].yaml_add_eol_comment("Noise Control",key='addr')
                                    v2[i2]['data'] = BinaryInt(v2[i2]['data'],width=8,underscore=[8,1,0])
                                    if v2[i2]['data'] & 0b10000000 == 0:
                                        v2[i2].yaml_add_eol_comment("Noise disable",key='data')
                                    else:
                                        v2[i2].yaml_add_eol_comment("Noise enable, frequency {0:d} (0x{1:02x})".format(v2[i2]['data'] & 0x1f,v2[i2]['data'] & 0x1f),key='data')
                                elif v2[i2]['addr'] == 0x10:
                                    v2[i2].yaml_add_eol_comment("Timer A High",key='addr')
                                    v2[i2].yaml_add_eol_comment("Timer A = {0:d} (0x{1:03x}) + value written into addr 0x11".format(v2[i2]['data'] << 2,v2[i2]['data'] << 2),key='data')
                                elif v2[i2]['addr'] == 0x11:
                                    v2[i2].yaml_add_eol_comment("Timer A Low",key='addr')
                                    v2[i2].yaml_add_eol_comment("Timer A = {0:d} (0x{1:02x}) + value written into addr 0x10".format(v2[i2]['data'] & 3,v2[i2]['data'] & 3),key='data')
                                elif v2[i2]['addr'] == 0x12:
                                    v2[i2].yaml_add_eol_comment("Timer B",key='addr')
                                    v2[i2].yaml_add_eol_comment("{0:d}".format(v2[i2]['data']),key='data')
                                elif v2[i2]['addr'] == 0x14:
                                    v2[i2].yaml_add_eol_comment("IRQ Control",key='addr')
                                    v2[i2].yaml_add_eol_comment("CSM={0:d} ACK={1:d} IRQEN={2:d} Start={3:d}".format((v2[i2]['data'] & 0x80) >> 7,(v2[i2]['data'] & 0x30) >> 4,(v2[i2]['data'] & 0x0c) >> 2,v2[i2]['data'] & 0x03),key='data')
                                elif v2[i2]['addr'] == 0x18:
                                    v2[i2].yaml_add_eol_comment("LFO frequency",key='addr')
                                    n = v2[i2]['data']
                                    lfo = ((((0x10 | (n & 0xf)) << (n >> 4))) / 2**36) * 3579545
                                    v2[i2].yaml_add_eol_comment("{0:f} Hz".format(lfo),key='data')
                                elif v2[i2]['addr'] == 0x19:
                                    v2[i2].yaml_add_eol_comment("LFO amplitude",key='addr')
                                    if v2[i2]['data'] & 0x80:
                                        v2[i2].yaml_add_eol_comment("PMD: {0:d} (0x{1:02x})".format(v2[i2]['data'] & 0x7f, v2[i2]['data'] & 0x7f),key='data')
                                    else:
                                        v2[i2].yaml_add_eol_comment("AMD: {0:d} (0x{1:02x})".format(v2[i2]['data'], v2[i2]['data']),key='data')
                                elif v2[i2]['addr'] == 0x1b:
                                    v2[i2].yaml_add_eol_comment("CT/LFO Waveform",key='addr')
                                    lfo = ('Saw','Square','Triangle','Noise')[v2[i2]['data'] & 0x03]
                                    ct = ('','CT1 high, ','CT2 high, ','CT1+CT2 high, ')[(v2[i2]['data'] & 0x80) >> 7]
                                    v2[i2].yaml_add_eol_comment("{0:s}{1:s}".format(ct, lfo),key='data')
                                elif v2[i2]['addr'] & 0xf8 == 0x20:
                                    v2[i2].yaml_add_eol_comment("Channel {0:d}: R/L Output, Feedback, Algorithm (RL_FB_CON)".format(v2[i2]['addr'] & 0x7),key='addr')
                                    rl = ('No output','Left','Right','Left+Right')[(v2[i2]['data'] & 0xc0) >> 6]
                                    fb = (v2[i2]['data'] & 0x38) >> 3
                                    alg = (v2[i2]['data'] & 0x07)
                                    v2[i2].yaml_add_eol_comment("{0:s}, Feedback {1:d}, Algorithm {2:d}".format(rl, fb, alg),key='data')
                                elif v2[i2]['addr'] & 0xf8 == 0x28:
                                    v2[i2].yaml_add_eol_comment("Channel {0:d}: Key code (KC)".format(v2[i2]['addr'] & 0x7),key='addr')
                                    octave = (v2[i2]['data'] & 0xf0) >> 4
                                    note = ('C#','D-','D#','Alternate D#','E-','F-','F#','Alternate F#','G-','G#','A-','Alternate A-','A#','B-','C-','Alternate C-')[(v2[i2]['data'] & 0x0f)]
                                    v2[i2].yaml_add_eol_comment("Note {0:s}{1:d}".format(note, octave),key='data')
                                elif v2[i2]['addr'] & 0xf8 == 0x30:
                                    v2[i2].yaml_add_eol_comment("Channel {0:d}: Key fraction (KF)".format(v2[i2]['addr'] & 0x7),key='addr')
                                    cents = ((v2[i2]['data'] & 0xfc) >> 2)*100 / 64
                                    v2[i2].yaml_add_eol_comment("+{0:.2f} cents".format(cents),key='data')
                                elif v2[i2]['addr'] & 0xf8 == 0x38:
                                    v2[i2].yaml_add_eol_comment("Channel {0:d}: Modulation Sensitivity (PMS_AMS)".format(v2[i2]['addr'] & 0x7),key='addr')
                                    pms = (v2[i2]['data'] & 0x70) >> 4
                                    ams = (v2[i2]['data'] & 0x03)
                                    v2[i2].yaml_add_eol_comment("PMS: {0:d}, AMS: {1:d}".format(pms,ams),key='data')
                                else:
                                    channel = v2[i2]['addr'] & 0x07
                                    op = ('M1','M2','C1','C2')[(v2[i2]['addr'] & 0x18) >> 3]
                                    if v2[i2]['addr'] & 0xe0 == 0x40:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: Fine Detune, Multiplier (DT1_MUL)".format(channel,op),key='addr')
                                        dt1 = (v2[i2]['data'] & 0x70) >> 4
                                        mul = (v2[i2]['data'] & 0x03)
                                        v2[i2].yaml_add_eol_comment("DT1: {0:d}, MUL: {1:d}".format(dt1,mul),key='data')
                                    elif v2[i2]['addr'] & 0xe0 == 0x60:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: Volume Attenuation (TL)".format(channel,op),key='addr')
                                        tl = (v2[i2]['data'] & 0x7f) * -0.75
                                        if tl == -95.25:
                                            tl = float('-Infinity')
                                        v2[i2].yaml_add_eol_comment("Attenuation: {0:.2f} dB".format(tl),key='data')
                                    elif v2[i2]['addr'] & 0xe0 == 0x80:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: Key Scaling, Attack Rate (KS_AR)".format(channel,op),key='addr')
                                        ks = (v2[i2]['data'] & 0xc0) >> 6
                                        ar = v2[i2]['data'] & 0x1f 
                                        rh = (ar & 0x1e) >> 1
                                        rl = (ar & 0x01) << 1
                                        rate = (10**4.202682)/(2**rh)*(1/(1+0.25*rl))
                                        if (ar) < 2:
                                            rate = float('Infinity')
                                        v2[i2].yaml_add_eol_comment("KS: {0}, Base Attack Rate: {1:.2f} ms".format(ks,rate),key='data')
                                    elif v2[i2]['addr'] & 0xe0 == 0xa0:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: AM Enable, Decay Rate 1 (AMSEN_D1R)".format(channel,op),key='addr')
                                        amsen = ('disabled','enabled')[(v2[i2]['data'] & 0x80) >> 7]
                                        d1r = v2[i2]['data'] & 0x1f 
                                        rh = (d1r & 0x1e) >> 1
                                        rl = (d1r & 0x01) << 1
                                        rate = (10**4.202682)/(2**rh)*(1/(1+0.25*rl))*13.821907059
                                        if (d1r) < 2:
                                            rate = float('Infinity')
                                        v2[i2].yaml_add_eol_comment("AM: {0}, Base D1 Rate: {1:.2f} ms".format(amsen,rate),key='data')
                                    elif v2[i2]['addr'] & 0xe0 == 0xc0:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: Coarse Detune, Decay Rate 2 (DT2_D2R)".format(channel,op),key='addr')
                                        dt2 = (v2[i2]['data'] & 0xc0) >> 6
                                        d2r = v2[i2]['data'] & 0x1f 
                                        rh = (d2r & 0x1e) >> 1
                                        rl = (d2r & 0x01) << 1
                                        rate = (10**4.202682)/(2**rh)*(1/(1+0.25*rl))*13.821907059
                                        if (d2r) < 2:
                                            rate = float('Infinity')
                                        v2[i2].yaml_add_eol_comment("DT2: {0:d}, Base D2 Rate: {1:.2f} ms".format(dt2,rate),key='data')
                                    elif v2[i2]['addr'] & 0xe0 == 0xe0:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} op {1:s}: Decay 1 Level, Release Rate (D1L_RR)".format(channel,op),key='addr')
                                        d1l = (v2[i2]['data'] & 0xf0) >> 4
                                        rr = v2[i2]['data'] & 0x0f 
                                        rh = rr
                                        rl = 2
                                        rate = (10**4.202682)/(2**rh)*(1/(1+0.25*rl))*13.821907059
                                        if (rr == 0):
                                            rate = float('Infinity')
                                        v2[i2].yaml_add_eol_comment("D1L: {0:d}, Base Release Rate: {1:.2f} ms (0x{2:02x})".format(d1l,rate,rr),key='data')
                                i2 += 1
                            # End ym_write entry
                        elif k2 == 'psg_write':
                            # We don't advance file_offset here since this is a pseudo-event
                            # Replace any existing comment
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("PSG write block: {0:d} (0x{1:02x}) events".format(len(v2),len(v2)),key=k2)
                            i2 = 0
                            while i2 < len(v2):
                                file_offset += 2
                                # Remove any existing comments
                                v2[i2].ca.items.pop('addr',None)
                                v2[i2].ca.items.pop('data',None)
                                # Normalize addr
                                v2[i2]['addr'] = HexInt(v2[i2]['addr'],width=2)
                                # Normalize data to hex unless overridden later
                                v2[i2]['data'] = HexInt(v2[i2]['data'],width=2)
                                channel = (v2[i2]['addr'] & 0x3c) >> 2
                                attr = v2[i2]['addr'] & 0x03
                                if attr == 0x00 or attr == 0x01:
                                    if attr == 0x00:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} LSB of frequency".format(channel),key='addr')
                                        psg_freq[channel] = (psg_freq[channel] & 0xff00) | v2[i2]['data']
                                    else:
                                        v2[i2].yaml_add_eol_comment("Channel {0:d} MSB of frequency".format(channel),key='addr')
                                        psg_freq[channel] = (psg_freq[channel] & 0x00ff) | (v2[i2]['data'] << 8)
                                    # Look ahead, if next event is a paired frequency change, this write is transient, and is not representative of the note being played
                                    if i2+1 < len(v2) and ((v2[i2]['addr'] & 0x3e) == (v2[i2+1]['addr'] & 0x3e)):
                                        v2[i2].yaml_add_eol_comment("(partial change)",key='data')
                                    else:
                                        # convert PSG freq to Hz
                                        hz = psg_freq[channel] * (48828.125 / (2**17))
                                        # convert Hz to MIDI note + fraction
                                        notenum = math.log(hz,2**(1/12)) - 36.37631656229588 # normalize notenum so C-0 is 12
                                        note = ('C-','C#','D-','D#','E-','F-','F#','G-','G#','A-','A#','B-')[int(notenum+0.5) % 12]
                                        octave = int((int(notenum+0.5)/12)-1)
                                        cents = 100 * (notenum - int(notenum+0.5))
                                        v2[i2].yaml_add_eol_comment("Note: {0:s}{1:d} {2:+.2f} ({3:.1f} Hz, 0x{4:x} VERA)".format(note,octave,cents,hz,int(psg_freq[channel])),key='data')
                                elif attr == 0x02:
                                    v2[i2].yaml_add_eol_comment("Channel {0:d} R+L Output, Volume".format(channel),key='addr')
                                    rl = ('No output (Phase Reset)','Left','Right','Left+Right')[(v2[i2]['data'] & 0xc0) >> 6]
                                    vol = v2[i2]['data'] & 0x3f
                                    v2[i2].yaml_add_eol_comment("{0:s}, Volume {1:d} (0x{1:02x})".format(rl,vol),key='data')
                                else: # 0x03
                                    v2[i2].yaml_add_eol_comment("Channel {0:d} Waveform, Pulse width".format(channel),key='addr')
                                    wf = ('Pulse','Sawtooth','Triangle','Noise')[(v2[i2]['data'] & 0xc0) >> 6]
                                    if wf == 'Pulse':
                                        pw = v2[i2]['data'] & 0x3f
                                        v2[i2].yaml_add_eol_comment("{0:s}, width {1:.1f}% (0x{2:0x})".format(wf,(pw+1)*(50/64),pw),key='data')
                                    else:
                                        v2[i2].yaml_add_eol_comment("{0:s}".format(wf),key='data')

                                i2 += 1
                        elif k2 == 'pcm_write':
                            file_offset += 2
                            # Replace any existing comment
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("PCM write block: {0:d} (0x{1:02x}) events".format(len(v2),len(v2)),key=k2)
                            i2 = 0
                            while i2 < len(v2):
                                file_offset += 2
                                # Remove any existing comments
                                v2[i2].ca.items.pop('addr',None)
                                v2[i2].ca.items.pop('data',None)
                                # Normalize addr
                                v2[i2]['addr'] = HexInt(v2[i2]['addr'],width=2)
                                # Normalize data to hex unless overridden later
                                v2[i2]['data'] = HexInt(v2[i2]['data'],width=2)
                                if v2[i2]['addr'] == 0x00:
                                    v2[i2].yaml_add_eol_comment("PCM Ctrl",key='addr')
                                    dcmt = []
                                    if v2[i2]['data'] & 0x80:
                                        dcmt.append("Reset FIFO")
                                    vol = v2[i2]['data'] & 0x0f
                                    db = ('silent', '-18.0dB', '-15.0dB', '-13.3dB', '-12.0dB', '-11.1dB', '-10.3dB', '-9.0dB', '-7.6dB', '-6.6dB', '-5.5dB', '-4.4dB', '-3.3dB', '-2.3dB', '-1.2dB', '-0.0dB')[vol]
                                    dcmt.append("Volume: {0:d} (0x{0:02x}) {1:s}".format(vol,db) )
                                    v2[i2].yaml_add_eol_comment(", ".join(dcmt),key='data')
                                elif v2[i2]['addr'] == 0x01:
                                    v2[i2].yaml_add_eol_comment("PCM Rate",key='addr')
                                    pcm_rate = v2[i2]['data'] * 381.469726563
                                    v2[i2].yaml_add_eol_comment("{0:.2f} Hz".format(pcm_rate),key='data')
                                elif v2[i2]['addr'] == 0x02:
                                    v2[i2].yaml_add_eol_comment("PCM Instrument Trigger",key='addr')
                                    inst = next((item for item in d if 'pcm_insts' in item))['pcm_insts'][v2[i2]['data']]
                                    pcm_ch = 2 if inst['geometry'] & 0x10 else 1
                                    pcm_depth = 16 if inst['geometry'] & 0x20 else 8
                                    duration = (inst['length'] / pcm_rate) * 8000 / pcm_ch / pcm_depth # Milliseconds
                                    v2[i2].yaml_add_eol_comment("Playback duration: {0:.2f} ms".format(duration),key='data')
                                i2 += 1
                        elif k2 == 'sync_event':
                            file_offset += 2
                            # Replace any existing comment
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("Sync event write block: {0:d} (0x{1:02x}) events".format(len(v2),len(v2)),key=k2)
                            i2 = 0
                            while i2 < len(v2):
                                file_offset += 2
                                # Remove any existing comments
                                v2[i2].ca.items.pop('type',None)
                                v2[i2].ca.items.pop('data',None)
                                # Normalize type
                                v2[i2]['type'] = HexInt(v2[i2]['type'],width=2)
                                # Normalize data to hex unless overridden later
                                v2[i2]['data'] = HexInt(v2[i2]['data'],width=2)
                                if v2[i2]['type'] == 0x00:
                                    v2[i2].yaml_add_eol_comment("Generic sync message",key='type')
                                    v2[i2].yaml_add_eol_comment("Raw value",key='data')
                                i2 += 1
                        elif k2 == 'chip_write':
                            file_offset += 3
                            # Normalize chip_id
                            v2['chip_id'] = HexInt(v2['chip_id'],width=2)
                            # Replace any existing comment
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("Chip write block: {0:d} (0x{1:02x}) data bytes".format(len(v2['data']),len(v2['data'])),key=k2)
                            if v2['chip_id'] == 1 or v2['chip_id'] == 2: # MIDI
                                v2.yaml_add_eol_comment(f"MIDI {v2['chip_id']:d}",key='chip_id')
                                i2 = 0
                                cmd = 0

                                v2.ca.items.pop('data',None)
                                v2.yaml_add_eol_comment(f"MIDI events",key='data')
                                while i2 < len(v2['data']):
                                    file_offset += 1
                                    # Remove any existing comments
                                    v2['data'].ca.items.pop(i2,None)
                                    # Normalize data to hex
                                    v2['data'][i2] = HexInt(v2['data'][i2],width=2)
                                    if v2['data'][i2] & 0xf0 >= 0x80:
                                        if v2['data'][i2] < 0xf0:
                                            cmd = v2['data'][i2]
                                            ctype = cmd & 0xf0
                                            parm = 0
                                            chn = cmd & 0x0f
                                        if ctype == 0x80:
                                            v2['data'].yaml_add_eol_comment(f"Note off, MIDI channel {chn+1}", i2)
                                        elif ctype == 0x90:
                                            v2['data'].yaml_add_eol_comment(f"Note on, MIDI channel {chn+1}", i2)
                                        elif ctype == 0xa0:
                                            v2['data'].yaml_add_eol_comment(f"Note aftertouch, MIDI channel {chn+1}", i2)
                                        elif ctype == 0xb0:
                                            v2['data'].yaml_add_eol_comment(f"Continuous dontroller, MIDI channel {chn+1}", i2)
                                        elif ctype == 0xc0:
                                            v2['data'].yaml_add_eol_comment(f"Program change, MIDI channel {chn+1}", i2)
                                        elif ctype == 0xd0:
                                            v2['data'].yaml_add_eol_comment(f"Channel aftertouch, MIDI channel {chn+1}", i2)
                                        elif ctype == 0xe0:
                                            v2['data'].yaml_add_eol_comment(f"Pitch bend, MIDI channel {chn+1}", i2)
                                    else:
                                        if ctype == 0x80:
                                            if parm == 0:
                                                note = ('C-','C#','D-','D#','E-','F-','F#','G-','G#','A-','A#','B-')[v2['data'][i2] % 12]
                                                octave = int(int(v2['data'][i2]/12)-1)
                                                if chn == 9:
                                                    key = mididrum[v2['data'][i2]]
                                                else:
                                                    key = f"Key {note}{octave}"
                                                v2['data'].yaml_add_eol_comment(f"{key} (Note off, Ch {chn+1})", i2)
                                                parm += 1
                                            else:
                                                v2['data'].yaml_add_eol_comment(f"Velocity {v2['data'][i2]} (Note off, Ch {chn+1})", i2)
                                                parm = 0
                                        if ctype == 0x90:
                                            if parm == 0:
                                                note = ('C-','C#','D-','D#','E-','F-','F#','G-','G#','A-','A#','B-')[v2['data'][i2] % 12]
                                                octave = int(int(v2['data'][i2]/12)-1)
                                                if chn == 9:
                                                    key = mididrum[v2['data'][i2]]
                                                else:
                                                    key = f"Key {note}{octave}"
                                                v2['data'].yaml_add_eol_comment(f"{key} (Note on, Ch {chn+1})", i2)
                                                parm += 1
                                            else:
                                                v2['data'].yaml_add_eol_comment(f"Velocity {v2['data'][i2]} (Note on, Ch {chn+1})", i2)
                                                parm = 0
                                        if ctype == 0xa0:
                                            if parm == 0:
                                                note = ('C-','C#','D-','D#','E-','F-','F#','G-','G#','A-','A#','B-')[v2['data'][i2] % 12]
                                                octave = int(int(v2['data'][i2]/12)-1)
                                                if chn == 9:
                                                    key = mididrum[v2['data'][i2]]
                                                else:
                                                    key = f"Key {note}{octave}"
                                                v2['data'].yaml_add_eol_comment(f"{key} (Note aftertouch, Ch {chn+1})", i2)
                                                parm += 1
                                            else:
                                                v2['data'].yaml_add_eol_comment(f"Value {v2['data'][i2]} (Note aftertouch, Ch {chn+1})", i2)
                                                parm = 0
                                        if ctype == 0xb0:
                                            if parm == 0:
                                                try:
                                                    cname = midiccs[v2['data'][i2]]
                                                except KeyError:
                                                    cname = f"CC {v2['data'][i2]}"
                                                v2['data'].yaml_add_eol_comment(f"{cname} (CC, Ch {chn+1})", i2)
                                                parm += 1
                                            else:
                                                v2['data'].yaml_add_eol_comment(f"Value {v2['data'][i2]} (CC, Ch {chn+1})", i2)
                                                parm = 0
                                        if ctype == 0xc0:
                                            try:
                                                iname = midipatches[v2['data'][i2]]
                                            except KeyError:
                                                iname = f"Unknown patch"
                                            v2['data'].yaml_add_eol_comment(f"{iname} (Program {v2['data'][i2]}, Ch {chn+1})", i2)
                                            parm = 0
                                    i2 += 1
                        elif k2 == 'delay':
                            v2 = ScalarInt(v2)
                            file_offset += 1
                            ticks += v2
                            tsec = ticks/z['tick_rate']
                            tmin = int(tsec/60)
                            tsec -= (tmin*60)
                            dsec = v2/z['tick_rate']
                            d[di].yaml_add_eol_comment("{0:d} ticks ({1:.2f}s), total {2:d} ({3:d}m{4:05.2f}s) ".format(v2,dsec,ticks,tmin,tsec),key=k2)
                        elif k2 == 'pcm_insts':
                            d[di].ca.items.pop(k2,None)
                            d[di].yaml_add_eol_comment("Instrument definitions",key=k2)
                            i2 = 0
                            while i2 < len(v2):
                                v2[i2].ca.items.pop('geometry', None) # remove any old comment
                                v2[i2].ca.items.pop('offset', None) # remove any old comment
                                v2[i2].ca.items.pop('length', None) # remove any old comment
                                v2[i2].ca.items.pop('features', None) # remove any old comment
                                v2[i2].ca.items.pop('loop_point', None) # remove any old comment
                                v2[i2].ca.items.pop('reserved', None) # remove any old comment
                                v2[i2]['geometry'] = HexInt(v2[i2]['geometry'], width=2)
                                v2[i2]['offset'] = HexInt(v2[i2]['offset'], width=6)
                                v2[i2]['length'] = HexInt(v2[i2]['length'], width=6)
                                v2[i2]['features'] = HexInt(v2[i2]['features'], width=2)
                                v2[i2]['loop_point'] = HexInt(v2[i2]['loop_point'], width=6)
                                v2[i2]['reserved'] = HexInt(v2[i2]['reserved'], width=8)
                                pcm_ch = 2 if v2[i2]['geometry'] & 0x10 else 1
                                pcm_depth = 16 if v2[i2]['geometry'] & 0x20 else 8
                                cmt = ("Instrument 0x{0:02x}, ".format(i2))+("{0:d}-bit".format(pcm_depth))+(" stereo" if pcm_ch == 2 else " mono")
                                v2[i2].yaml_add_eol_comment(cmt,key='geometry')
                                i2 += 1
                        elif k2 == 'pcm_data':
                            z['pcm_offset'] = file_offset
                            d[di].ca.items.pop(k2,None)
                            i2 = 0
                            while i2 < len(v2):
                                for pdi in range(16):
                                    if i2+pdi < len(v2):
                                        v2[i2+pdi].ca.items.pop('value',None)
                                        v2[i2+pdi]['value'] = HexInt(v2[i2+pdi]['value'], width=2)
                                v2[i2].yaml_add_eol_comment("Offset 0x{0:06x}".format(i2),key='value')
                                i2 += 16
                        else:
                            print (k2)
                elif type(d[di]) is str:
                    if d[di] == 'loop':
                        tsec = ticks/z['tick_rate']
                        tmin = int(tsec/60)
                        tsec -= (tmin*60)
                        d.yaml_add_eol_comment("Loop start: {0:d}m{1:04.1f}s at byte offset {2:d} (0x{2:02x}) ".format(tmin,tsec,file_offset),key=di)
                        # Put this in to pass state to export
                        z['loop_addr'] = HexInt(file_offset,width=6)
                    elif d[di] == 'eod':
                        file_offset += 1
                        d.yaml_add_eol_comment("End of ZSM stream",key=di)
                else:
                    print(type(d[di]))
                di += 1


    return

yaml = ruamel.yaml.YAML(typ='rt')
y = yaml.load("""zsm:\n  version: 0\n""")

parser = argparse.ArgumentParser()
inputgroup = parser.add_mutually_exclusive_group()
outputgroup = parser.add_mutually_exclusive_group()
inputgroup.add_argument("-m", metavar="input.mid", type=argparse.FileType('rb'), help='Input MIDI file')
inputgroup.add_argument("-i", metavar="input.zsm", type=argparse.FileType('rb'), help='Input ZSM file')
inputgroup.add_argument("-c", metavar="input.yaml", type=argparse.FileType('r'), help='Input YAML file')
outputgroup.add_argument("-o", metavar="output.zsm", type=argparse.FileType('wb'), help='Output ZSM file')
outputgroup.add_argument("-d", metavar="output.yaml", type=argparse.FileType('w'), help='Output YAML file')


if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

if (args.m is not None): # Import a MIDI file
    if not MIDItoYAML(args.m,y['zsm']):
        warnings.warn("MIDI import problem: trying to continue anyway")
    # Round-trip it in YAML so the entire structure is upgraded and comments can be attached
    buf = bytes()
    buff = io.BytesIO(buf)
    yaml.dump(y,buff)
    buff.seek(0)
    y = yaml.load(buff)


if (args.i is not None): # Import a ZSM
    if not ZSMtoYAML(args.i,y['zsm']):
        warnings.warn("ZSM import problem: format/version mismatch or unexpected EOF, trying to continue anyway")
    # Round-trip it in YAML so the entire structure is upgraded and comments can be attached
    buf = bytes()
    buff = io.BytesIO(buf)
    yaml.dump(y,buff)
    buff.seek(0)
    y = yaml.load(buff)

if (args.c is not None): # Import a YAML
    y = yaml.load(args.c)

annotateYAML(y['zsm']) # Comment everything, convert the representation of numbers, etc. to improve readability

if (args.o is not None): # Export a ZSM
    if not YAMLtoZSM(args.o,y['zsm']):
        warnings.warn("Problem exporting ZSM file, it's probably incomplete")

if (args.d is not None): # Export a YAML
    del y['zsm']['pcm_offset']
    del y['zsm']['loop_addr']
    yaml.dump(y,args.d)

